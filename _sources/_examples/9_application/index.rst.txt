9. Application
==============

The classes and methods described in this sub-module are instrumental to interact with the graphic user interface (GUI).

They allow to identify GUI Components such as the Work Tree, the Terminal, the Editor or the Script in PyMpc (MpcGUIComponents). Moreover, they facilitate the interaction with the working thread, the definition of a new thread providing access to documents and the creation of a process monitor. The App sub-module overall enables the user to create and run utilities and custom commands. The main class in the sub-module App is the MpcBackgroundWorkerProgressMonitorInterface, a monitor interface to dialog with a process running on a separate thread. The user can therefore interact with the threads with a series of functions such as: runCommand (a utility to run a specific command), processEvents (to process all the events of the event loop that were waiting while a previous process was running), currentSolverName (to query the name of the solver in use), clearTerminal (to clear the terminal window), updateActiveView (to updated the render view), etc.

The following example, references the same structure of the example in section Standard, with the additional creation of a simple function which defines a pop-up window which will monitor a process running on the working thread, by showing the number of iterations and the percentage. As mentioned in page1, classes and functions for the PySide2 package are be used in combination with PyMpc for application development in STKO.

.. code-block:: python

    from PyMpc.App import (runOnBlockingWorkingThread,monitor)
    from time import sleep
    from PySide2.QtCore import QThread

    def function():
       print("From WORKER: ", QThread.currentThread())
       m = monitor()
       for i in range(10):
           sleep(0.5)
           m.sendMessage('iteration {}'.format(i+1))
           m.sendPercentage(float(i+1)/10.0)

    print("From GUI: ", QThread.currentThread())
    runOnBlockingWorkingThread(function)

The function just created could be complemented with another one, which interrupts the process on the working thread and asks for a input to continue. Before defining the function to run in the working thread, use QApplication to get the active window, then make the counter global and set the range for the current call.

.. code-block:: python

    from PyMpc.App import (runOnBlockingWorkingThread,monitor)
    from time import sleep
    from PySide2.QtCore import (QThread)
    from PySide2.QtWidgets import (QApplication,QMessageBox)

    awin = QApplication.activeWindow()

    counter = 0

    rstart, rend = 0, 0

    def function():
        global counter
        try:
            m = monitor()
            for i in range(rstart, rend):
                sleep(0.5)
                counter += 1
                m.sendMessage('iteration {}'.format(counter))
                m.sendPercentage(float(i+1)/10.0)
        except Exception as ex:
            print(ex)

This time the function is called with the runOnBlockingWorkingThread of PyMpc.App inside another one which first runs part of the process, then it interrupts it at a specified threshold to query information to the user, and then completes it.

.. code-block:: python

    def main_function():
        global rstart, rend

        rstart, rend = 0, 5
        runOnBlockingWorkingThread(function)
        if QMessageBox.information(awin, "STKO Script Example", "Done 50% of the job, do you want to continue?", QMessageBox.Yes | QMessageBox.Cancel) != QMessageBox.Yes:
                    return

        rstart, rend = 5, 10
        runOnBlockingWorkingThread(function)

    main_function()