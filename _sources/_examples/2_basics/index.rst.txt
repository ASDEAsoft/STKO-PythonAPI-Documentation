2. Basics
=========

In this section a few basic examples on how to use the most simple classes and functions in `PyMpc <../../_api/_modules/PyMpc.html>`_ are provided.

In the subsections you will find code snippets that you can directly test in your STKO, by copy-pasting them in the Scripting Interface.

#############
2.1. Utilities
#############

In the `Utils <../../_api/_modules/PyMpc.Utils.html>`_ sub-module, two useful functions to query the directory of the STKO application and the OpenSees external solvers are provided. They can be used as following.

.. code-block:: python

    from PyMpc import *
    d = Utils.get_app_dir()
    print(d)
    s = Utils.get_external_solvers_dir()
    print(s)

Most likely the following will appear in the Terminal.

.. code-block::

    C:/Program Files/STKO
    C:/Program Files/STKO\external_solvers

#################
2.2. Input/Output
#################

In the `IO <../../_api/_modules/PyMpc.IO.html>`_ sub-module, three additional functions allow the user to color-code the output text in the terminal. These functions can be useful for checking operations in long text outputs.

An example on how they can be used in STKO. Try it yourself and observe the output in the Terminal.

.. code-block:: python

    from PyMpc import *
    IO.write_cout("This is an output")
    IO.write_clog("This is an log")
    IO.write_cerr("This is an error")

Specifically write_cerr can be used to raise exceptions in try loops and allow better readability of the output. For example:

.. code-block:: python

    from PyMpc import *
    try:
        print(x)
    except Exception:
        IO.write_cerr("Exception: variable x is not defined")

#################
2.3. Units
#################

The classes and methods in the Units sub-module of PyMpc are defined to allow the user to interact with the unit system. As it is known, OpenSees does not have the concept of unit system, so it is common practice to choose a set of reference units before starting the model and keep consistency with the units of each input. In this sub-module, a reference unit system was created, according to the International System of Units, and a few essential base and derived units were defined. There is the potential for the user to define a customized unit system and interact with it in the scripting interface, but it is still in a development phase. Hereafter, an example of what it is possible to do now with the Math sub-module.

An example of how to interact with the unit already defined in the sub-module is provided below.

.. code-block:: python

    from PyMpc import *
    import PyMpc.Units as u

    App.clearTerminal()

    L = u.L         #base unit length [meter]
    t = u.t         #base unit time [second]
    T = u.T         #base unit temperature [Celsius]
    r = u.Angle     #derived unit angle [radian]
    F = u.F         #derived unit force [Newton]
    P = F/(L**2)    #unit pressure [Pascal]
    print ("The reference unit of pressure (Pascal):")
    print (P)

.. note::
    ``clearTerminal()`` is a function of the sub-module `App <../../_api/_modules/PyMpc.App.html>`_ used to clear the terminal from previous printed output.

This is the output you’ll obtain in the Terminal.

.. code-block::

    The reference unit of pressure (Pascal):
                 Dimension:                         F/L^2
             Current units:              1          N/m^2
            Internal units:              1          N/m^2

#################
2.4. Math
#################

The sub-module Math in PyMpc provides vector and matrix objects, available for 2, 3, 4 and n dimensions. These classes allow for mathematical operations such as dot and cross products, transpose or transformation to quaternion (for 4D). Also classes for vertex elements and quaternions are provided. Classes called for example mat_array are exported from STKO source code in C++. They behave as a list in Python, allowing concatenation, repetition, slicing, appending, and any other operation available on list objects in Python. The presence of these classesin the sub-module Math, allows interoperability between the strongly typed elements in STKO source code and the Python scripting interface.

We suggest to import the Math sub-module as following, to avoid overlapping with variable names.

.. code-block:: python

    import PyMpc.Math as m

#################
2.5. Fx
#################

.. note::
    At this stage the classes referring to the graphic representation for OpenGL still need to be documented.

#################
2.6. Open Cascade
#################

In PyMpc, there are a set of functions and classes to interact wit the CAD environment and directly query geometries, build new elements and interact with existing ones. To separate these set of classes and functions from the rest, three separate sub-modules have been developed: FxoccShape, FxoccQuery, FxoccShape. Where “occ” stands for Open Cascade and “Fx” for graphic representation for OpenGl.

*********************
2.6.1. FxoccShape
*********************

In the sub-module FxoccShape, there are utilities to generate Open Cascade data for CAD, in terms of shapes, curves and surfaces.

********************
2.6.2. FxoccBuilder
********************

The sub-module FxoccBuilder includes functions to create vertices, edges and faces and creating from them wires, compounds and shells. An example on how to use this sub-module will be provided in section Geometries.

********************
2.6.3. FxoccQuery
********************

In the sub-module FxoccQuery the class DistanceInfo and method computeDistance can be used to query information on the distance of two FxOccShape instances. The following example will illustrate how to create new geometric elements in the Preprocessor environment and successively query information about their respective position.

First let’s initialize our script and call the MpcCaeDocument class and assign it to the variable doc.

.. code-block:: python

    from PyMpc import *

    App.clearTerminal()
    doc = App.caeDocument()

All geometries created need to be indexed. To ensure consistency between existing indices and new ones follow these steps (further explanation is provided in section Geometries)

.. code-block:: python

    id = 0
    if len(doc.geometries) > 0:
        id = doc.geometries.keys()[-1]
    print(id)

    def get_id():
        global id
        id += 1
        return id

Let’s create two edges, a vertical one and an horizontal one.

.. code-block:: python

    v1 = FxOccBuilder.makeVertex(0,0,0)
    v2 = FxOccBuilder.makeVertex(100, 0, 0)
    e1 = FxOccBuilder.makeEdge(v1,v2)

    v3 = FxOccBuilder.makeVertex(50,100,0)
    v4 = FxOccBuilder.makeVertex(50,-100, 0)
    e2 = FxOccBuilder.makeEdge(v3,v4)

.. code-block:: python

    add_geom(MpcGeometry(get_id(), "Shape1", e1))
    add_geom(MpcGeometry(get_id(), "Shape2", e2))

Finally, compute the distance between two shapes and then query information on it. The distance will be 0.0, and the parameters p1 and p2 will coincide in each solution, given that there is an intersection between the two shapes.

.. code-block:: python

    info = FxOccQuery.computeDistance(e1, e2)
    print('Done:', info.done)
    print('Inside:', info.inside)
    print('Distance:', info.minimumDistance)
    print('Number of solutions', info.numberOfSolutions)
    for i in range(info.numberOfSolutions):
        print("Info p1[{}]:".format(i),info.p1[i])
        print("Info p2[{}]:".format(i),info.p2[i])

The following will appear in the terminal.

.. code-block::

    Done: True
    Inside: False
    Distance: 0.0
    Number of solutions: 2
    Info p1[0]: [0;0;0]
    Info p2[0]: [0;0;0]
    Info p1[1]: [100;0;0]
    Info p2[1]: [100;0;0]

#################
2.7. Qt
#################

.. note::
    Coming soon.

#################
2.8. Chart
#################

Three classes to call and create new Chart and ChartData are included in PyMpc. Namely: MpcChart, MpcChartData, MpcChartDataGraphicItem. The following script will illustrate how to create new elements for each of these classes. Start out as follows and use the postDocument function from the App sub-module to call the open .spd document. Then you can use a series of methods of the MpcPostDocument class, as the .spd document is an instance of that class, to clear the existing post processing session, commit the changes and set the document to dirty, so STKO will ask you to save before you close.

.. code-block:: python

    from PyMpc import *
    import numpy as np
    from time import sleep

    doc = App.postDocument()

    doc.clearCharts()
    doc.clearChartData()
    doc.commitChanges()
    doc.dirty = True

To illustrate the creation in turn of new chart data sets, new chart data items to input in the charts and finally new charts, a for loop of 10 iterations has been set as follows. In the first block of code inside the loop a new MpcChartData instance is created, and several attributes are assigned to it: an id, a name, and labels for the x and y axis. Random values are assigned to x and y in this example, but the user could choose to call an data from the .spd file or even call data saved externally. For example, with this method it will be possible to operate comparisons directly inside STKO with experimental data.

.. code-block:: python

    for iter in range(10):
        cdata = MpcChartData()
        cdata.id = doc.genNextIdForChartData()
        cdata.name = "Test Chart Data %i" % iter
        cdata.xLabel = "XData"
        cdata.yLabel = "YData"
        x = np.linspace(0.0, 4.0*float(iter), 1000)
        y = np.sin(x) * np.logspace(1.0, 1.0+float(iter)/10.0, 1000)
        cdata.x = Math.double_array(x.tolist())
        cdata.y = Math.double_array(y.tolist())
        doc.addChartData(cdata)
        doc.commitChanges()
        doc.dirty = True
        doc.select(cdata)
        App.processEvents()
        sleep(0.2)

After, always writing inside the for loop, an MpcChartDataGraphicItem for cdata is instantiated. It is necessary to create an instance of this class in order to visualize the chart data in the chart. Attributes such as color, thickness and penStyle of the item can be assigned.

.. code-block:: python

    cdata_item = MpcChartDataGraphicItem(cdata)
    cdata_item.color = MpcQColor(255, 150, 0, 255)
    cdata_item.thickness = 1.5
    cdata_item.penStyle = MpcQPenStyle.SolidLine
    Finally the chart is created and the chart data set is added to it

    chart = MpcChart()
    chart.id = doc.genNextIdForChart()
    chart.name = "Test Chart"
    chart.addItem(cdata_item)
    doc.addChart(chart)
    doc.commitChanges()
    doc.dirty = True
    doc.select(chart)
    App.processEvents()
    sleep(0.2)